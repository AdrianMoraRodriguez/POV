1. Agregar el archivo Angles2D.cs 
2. Agregar la definiciÃ³n de la clase

using OpenTK.Mathematics;

public class Angles2D {

        public double Yaw {get; set;}
        public double Pitch{get; set;}

        // Constructors

        public Angles2D(){
            Yaw=0.0;
            Pitch=0.0;
        }

        public Angles2D(double yaw, double pitch){

            Yaw=clampYaw(yaw);
            Pitch = clampPitch(pitch % 360.0);

        }

        public Angles2D(Angles2D ang){

            Yaw = ang.Yaw;
            Pitch = ang.Pitch;

        }

        // Operators +,-

        public static Angles2D operator+(Angles2D bA1,Angles2D bA2){
            double yaw,pitch;
            yaw = bA1.Yaw + bA2.Yaw;
            yaw=clampYaw(yaw);
               
            pitch = bA1.Pitch + bA2.Pitch;
            pitch = clampPitch(pitch % 360.0);

            return new Angles2D(yaw,pitch);
        }
        public static Angles2D operator-(Angles2D bA1,Angles2D bA2){
            double yaw,pitch;
            yaw = bA1.Yaw - bA2.Yaw;
            yaw  = clampYaw(yaw);
            pitch = bA1.Pitch - bA2.Pitch;
            pitch = clampPitch(pitch % 360.0);
            return new Angles2D(yaw,pitch);
        }

        public static Angles2D operator*(double f, Angles2D bA)
            => new Angles2D(clampYaw(f*bA.Yaw),clampPitch(f*bA.Pitch));
        public static Angles2D operator*(Angles2D bA,double f)
            => f*bA;

        // Clamps 
        private static double clampPitch(double pitch){
            double lim=89.0f;
            if(pitch<-lim)
                return -lim;
            if(pitch>lim)
                return lim;
            return pitch;
        }

        private static double clampYaw(double yaw)
        {
            yaw  = yaw % 360.0;
            if(yaw>180)
                yaw=-(360.0-yaw);
            
            return yaw;

        }


    }

3. Agregar el archico Controller.cs

4. Crear un interfaz

using OpenTK.Mathematics;
using OpenTK.Windowing.Common;
using OpenTK.Windowing.GraphicsLibraryFramework;



public interface IController
{
    public void UpdateState(KeyboardState kbstate, MouseState mstate, FrameEventArgs e);
    public Vector3 GetMovement(); 

    public Angles2D GetArmOrientation();
}


5. Crear la clase Controller.cs y algunos campos

private KeyboardState ?_keyboardState;
    

    private FrameEventArgs ?_frameEvent;

    private float _deltaTime;

    private Vector3 _movementInput = new Vector3();


    public float Speed {get; set;}

    public float ScaleMovement {get; set;}

    
    private int _hRes;
    private int _vRes;
    

6.  Crear el constructor

public Controller(int hRes, int vRes)
{

        Speed=1.0f;
        _hRes=hRes;
        _vRes=vRes;

}

7. Crear la funci'on UpdateState

public void UpdateState(KeyboardState kbstate,MouseState mstate, FrameEventArgs e)
    {
        _keyboardState = kbstate;

        _frameEvent=e;
        _deltaTime=(float)e.Time;
        _movementInput=Vector3.Zero;

        // Keyboard
        if(_keyboardState.IsKeyDown(Keys.W))
            _movementInput.X=Speed*_deltaTime;
        if(_keyboardState.IsKeyDown(Keys.S))
            _movementInput.X= -Speed*_deltaTime;
        if(_keyboardState.IsKeyDown(Keys.A))
            _movementInput.Y=-Speed*_deltaTime;
        if(_keyboardState.IsKeyDown(Keys.D))
            _movementInput.Y=Speed*_deltaTime;
        if(_keyboardState.IsKeyDown(Keys.E))
            _movementInput.Z=Speed*_deltaTime;
        if(_keyboardState.IsKeyDown(Keys.Q))
            _movementInput.Z=-Speed*_deltaTime;
        
    }

8. Crear la funci'on GetMovement

public Vector3 GetMovement(){


        return _movementInput*ScaleMovement;

}

9. Crear la funci'on GetArmOrientation

public Angles2D GetArmOrientation(){
        return new Angles2D();
        

    }

10. En la clase Window agregar los campos

private Controller _controller;
private int _horizontalResolution;
private int _verticalResolution;

11. En el constructor de la clase Window

  MonitorInfo minfo = Monitors.GetMonitorFromWindow(this);
  _horizontalResolution=minfo.HorizontalResolution;
  _verticalResolution=minfo.VerticalResolution;
        
 _controller=new Controller(_horizontalResolution,_verticalResolution);

12. En la m'etodo OnUpdateFrame

   // Controller Update
      _controller.UpdateState(this.KeyboardState,this.MouseState,e);

        // Update GameState
        UpdateGameState((float)e.Time);

13. Y agregar el m'etodo UpdateGameState

protected void UpdateGameState(float deltaTime){
    
    // Camera
    Vector3 movement=_controller.GetMovement();
   
   
   
    _camera.Position += _camera.Front*movement.X;
    _camera.Position += _camera.Right*movement.Y;
    _camera.Position += _camera.Up*movement.Z;
    
}


14. Para los 'angulos agregar a la clase Controller

private MouseState ?_mouseState;
 private bool _firstMouse=true;
private Vector2 _lastMouse=new Vector2();
public float MouseSensitivity {get; set;}
private Angles2D _armAngles;

15. En el constructor
MouseSensitivity=1000000.0f;
_armAngles=new Angles2D(0.0f,0.0f);

16. En UpdateState

_mouseState=mstate;

if (_mouseState.IsButtonDown(MouseButton.Left)){
        float deltaX,deltaY;
        // Normalize to device
        float mx = (float)_mouseState.X/_hRes;
        float my = (float)_mouseState.Y/_vRes;

        if(_firstMouse){
           _lastMouse=new Vector2(mx,my);
           _firstMouse=false; 
           _armAngles=new Angles2D(0.0f,0.0f);
        }
        else{
        deltaX= mx-_lastMouse.X;
        deltaY= my-_lastMouse.Y;

        _lastMouse=new Vector2(mx,my);
        _armAngles=new Angles2D(deltaX,-deltaY)*_deltaTime*MouseSensitivity;
        }
        }
        else
            _firstMouse=true;

17. En GetArmOrientation

public Angles2D GetArmOrientation(){
        return _armAngles;
        

    }

18. En Window agregar en UpdateGameState

Angles2D deltaAngles=_controller.GetArmOrientation();
Angles2D cameraAngles = new Angles2D(_camera.Yaw,_camera.Pitch);
cameraAngles += deltaAngles;
_camera.Yaw = (float)cameraAngles.Yaw;
_camera.Pitch = (float)cameraAngles.Pitch;